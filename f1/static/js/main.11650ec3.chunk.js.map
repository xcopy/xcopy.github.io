{"version":3,"sources":["redux/reducers.js","redux/store.js","components/navbar.js","components/footer.js","components/season/layout.js","components/link/driver.js","components/link/team.js","components/driver/teams.js","components/data-table.js","API.js","components/season/with-data.js","components/spinner.js","components/card.js","components/wiki.js","components/season/results.js","components/season/drivers.js","components/season/teams.js","components/alert.js","components/gp/race-result.js","components/gp/qualifying.js","components/gp/fastest-laps.js","helpers.js","components/gp/starting-grid.js","components/gp/pit-stops.js","components/gp/v11n.js","components/gp/details.js","components/item-list.js","components/driver/list.js","components/driver/records.js","components/driver/results.js","components/driver/standings.js","components/standings.js","components/active-years.js","components/driver/details.js","components/team/list.js","components/team/drivers.js","components/team/details.js","components/circuit/list.js","app.js","serviceWorker.js","index.js","img/logo.svg"],"names":["combineReducers","results","state","createStore","rootReducer","applyMiddleware","thunk","logger","MenuItems","to","GithubLink","href","className","icon","faGithub","Navbar","data-uk-navbar","src","logo","alt","style","height","data-uk-img","data-uk-toggle","data-uk-icon","id","data-uk-offcanvas","Footer","currentYear","Date","getFullYear","SeasonLayout","e","this","props","match","path","round","params","history","url","generatePath","year","target","value","push","children","years","_","range","minYear","links","faList","faUser","faCar","data-uk-grid","onChange","handleChange","bind","map","y","key","label","activeClassName","Component","LinkDriver","driver","driverId","givenName","familyName","LinkTeam","team","constructorId","name","DriverTeams","teams","i","length","customStyles","cells","padding","lineHeight","rows","fontSize","headCells","textTransform","color","createTheme","text","primary","secondary","striped","DataTable","noHeader","theme","roundCell","selector","center","grow","dateCell","format","date","moment","raceCell","cell","season","raceName","locationCell","row","Circuit","circuitName","Location","country","locality","positionCell","title","positionText","position","pos","parseInt","isRetired","isNaN","isPodium","classNames","numberCell","nationalityCell","Driver","Constructor","nationality","driverCell","teamCell","Constructors","conditionalCellStyles","when","display","lapsCell","timeCell","Time","status","time","winsCell","pointsCell","fontWeight","axiosInstances","axios","create","baseURL","setup","cache","maxAge","exclude","query","store","localforage","createInstance","version","forEach","instance","interceptors","request","use","config","limit","response","MRData","data","localApi","remoteApi","seasonWithData","WrappedComponent","busy","cancelSource","CancelToken","source","setState","get","cancelToken","token","then","cancel","onReady","fetchData","Spinner","data-uk-spinner","Card","isFunction","Wiki","summary","media","URL","pathname","split","all","spread","S","M","html","extract_html","thumbnail","items","srcset","scale","data-src","data-srcset","dangerouslySetInnerHTML","__html","faWikipediaW","rel","useState","setUrl","useEffect","Races","RaceTable","tableColumns","tableData","race","result","Results","Object","assign","keyField","columns","StandingsTable","StandingsLists","DriverStandings","ConstructorStandings","Alert","type","data-uk-alert","GPRaceResult","GPQualifying","QualifyingResults","GPFastestLaps","filter","FastestLap","sort","next","current","rank","number","lap","speed","AverageSpeed","normalizeResults","isZero","grid","r","grids","Math","max","toString","c","n","concat","timeToMs","timeString","hms","ms","parts","duration","as","GPStartingGrid","find","Q1","Q2","Q3","GPPitStops","PitStops","pitStop","stop","Button","onClick","attrs","data-uk-tooltip","Lap","order","faTrafficLight","faFlagCheckered","GPV11n","speeds","defaultDelay","faFastBackward","faForward","faFastForward","circuitEl","useRef","setBusy","delay","setDelay","setGrid","drivers","setDrivers","laps","setLaps","currentLap","setCurrentLap","lapsCount","setLapsCount","lapsShown","setLapsShown","lights","setLights","showLights","setShowLights","raceStarted","setRaceStarted","racePaused","setRacePaused","raceFinished","setRaceFinished","winner","setWinner","fastestLap","setFastestLap","fastestPitStop","setFastestPitStop","init","Laps","prevState","css","width","top","pit","el","arr","times","min","modalEl","document","getElementById","listener","floor","addEventListener","removeEventListener","intervalId","setInterval","clearInterval","step","retiredDrivers","isFinalLap","Timings","fastestTime","ps","xLaps","retired","offset","indexOf","findIndex","prevWidth","bottom","transitionDuration","ref","keys","includes","code","faClock","t","d","disabled","faPlay","faPause","faRedo","D1","C1","D2","C2","Nav","faChevronRight","faChevronLeft","GPDetails","races","setRaces","setRace","isMounted","catch","rest","objects","obj","faCalendar","faMapMarkerAlt","data-uk-tab","faPlayCircle","data-uk-modal","Highlight","styled","span","ItemList","heading","setData","setFilter","regexp","RegExp","handleSearch","f","trim","toLowerCase","letter","array","item","found","str","Number","visible","letters","charAt","visibleCards","onSubmit","preventDefault","placeholder","data-uk-height-match","itemsArray","showCard","maxHeight","item$","test","replace","renderToString","join","j","DriverList","useHistory","Drivers","DriverTable","Leader","data-uk-leader","DriverRecords","standings","loadingStandings","Standings","loadingRaces","getTotalOf","prop","standing","reduce","total","num","getFinishes","top10","entries","finishes","wins","faInfoCircle","DriverResults","faTrophy","points","input","model","responses","R","pages","ceil","prevProps","snapshot","nextProps","nextState","nextContext","s","r1","r2","normalizeRaces","setSeason","ActiveYears","isArray","maxYear","diff","difference","ranges","unshift","curr","sum","sub","uniq","Boolean","a","yearsToStr","DriverDetails","setDriver","setStandings","dateOfBirth","age","flat","sortBy","uniqWith","isEqual","getTeamsList","TeamList","setTeams","Teams","ConstructorTable","TeamDrivers","TeamDetails","teamId","setTeam","Team","getDriversList","CircuitList","circuits","setCircuits","Circuits","CircuitTable","circuit","circuitId","UIkit","icons","SeasonRouteWrapper","component","render","App","flexGrow","exact","SeasonResults","SeasonDrivers","SeasonTeams","from","isLocalhost","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","error","ReactDOM","StrictMode","process","origin","fetch","headers","contentType","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.11650ec3.chunk.js","sourcesContent":["// import {GET_SEASON_RESULTS} from './action-types';\nimport {combineReducers} from 'redux';\n\nfunction results(state = [], action) {\n    /*\n    switch (action.type) {\n        case GET_SEASON_RESULTS:\n            return action.payload;\n        default:\n            return state;\n    }\n    */\n    return state;\n}\n\nexport default combineReducers({results});\n","import {createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport rootReducer from './reducers';\n\nexport default createStore(rootReducer, applyMiddleware(thunk, logger));\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport logo from '../img/logo.svg'\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faGithub} from '@fortawesome/free-brands-svg-icons';\n\nconst MenuItems = () => (\n    <>\n        <li><Link to=\"/\">Standings</Link></li>\n        <li><Link to=\"/drivers\">Drivers</Link></li>\n        <li><Link to=\"/teams\">Teams</Link></li>\n        <li><Link to=\"/circuits\">Circuits</Link></li>\n    </>\n);\n\nconst GithubLink = () => (\n    <a href=\"https://github.com/xcopy/f1\" className=\"uk-navbar-item uk-logo\">\n        <FontAwesomeIcon icon={faGithub}/>\n    </a>\n);\n\nexport default function Navbar() {\n    return (\n        <nav className=\"uk-background-secondary\" data-uk-navbar=\"\">\n            <div className=\"uk-navbar-left\">\n                <a href=\"/\" className=\"uk-navbar-item uk-logo\">\n                    <img src={logo} alt=\"\" style={{height: 20}} data-uk-img=\"\"/>\n                </a>\n                <ul className=\"uk-navbar-nav uk-visible@m\">\n                    <MenuItems/>\n                </ul>\n            </div>\n            <div className=\"uk-navbar-right uk-visible@m\">\n                <GithubLink/>\n            </div>\n            <div className=\"uk-navbar-right uk-hidden@m\">\n                <a href={'#offcanvas-slide'} className=\"uk-navbar-toggle\" data-uk-toggle=\"\">\n                    <span data-uk-icon=\"menu\"/>\n                </a>\n            </div>\n            <div id=\"offcanvas-slide\" data-uk-offcanvas=\"mode: push; overlay: true\">\n                <div className=\"uk-offcanvas-bar\">\n                    <ul className=\"uk-nav uk-nav-default uk-text-uppercase\">\n                        <MenuItems/>\n                        <li>\n                            <GithubLink/>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n    );\n}\n","import React from 'react';\n\nexport default function Footer() {\n    return (\n        <div className=\"uk-padding-small uk-text-center\">\n            Powered by <a href=\"https://ergast.com/mrd/\">Ergast Developer API</a>\n        </div>\n    );\n}\n","import React, {Component} from 'react';\nimport {NavLink} from 'react-router-dom';\nimport {generatePath} from 'react-router';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faList, faUser, faCar} from '@fortawesome/free-solid-svg-icons';\nimport _ from 'lodash';\n\nexport const minYear = 1950;\nexport const currentYear = new Date().getFullYear();\n\nexport default class SeasonLayout extends Component {\n    handleChange(e) {\n        const {match: {\n            path,\n            params: {round}\n        }, history} = this.props;\n        const url = generatePath(path, {\n            year: e.target.value,\n            round\n        });\n\n        history.push(url);\n    }\n\n    render() {\n        const {match: {params: {year}}, children} = this.props;\n        const years = _.range(currentYear, minYear - 1, -1);\n        const links = [\n            ['results', faList],\n            ['drivers', faUser],\n            ['teams', faCar]\n        ];\n\n        return (\n            <>\n                <div className=\"uk-padding-small\">\n                    <div className=\"uk-grid-small\" data-uk-grid=\"\">\n                        <div className=\"uk-width-1-6@m\">\n                            <select\n                                className=\"uk-select\"\n                                value={year}\n                                onChange={this.handleChange.bind(this)}>\n                                {years.map(y => <option key={y} value={y}>{y}</option>)}\n                            </select>\n                        </div>\n                        <div className=\"uk-width-1-2@m uk-width-1-3@l\">\n                            <div className=\"uk-button-group uk-width-expand\">\n                                {links.map(([label, icon]) =>\n                                    <NavLink\n                                        to={`/${year}/${label}`} key={label}\n                                        className=\"uk-button uk-button-default uk-text-capitalize uk-width-1-3\"\n                                        activeClassName=\"uk-button-primary\">\n                                        <span className=\"uk-visible@m\">\n                                            <FontAwesomeIcon icon={icon}/>\n                                            {' '}\n                                        </span>\n                                        {label}\n                                    </NavLink>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"uk-padding-small\">\n                    {children}\n                </div>\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\n\nLinkDriver.propTypes = {\n    driver: PropTypes.object.isRequired\n};\n\nexport default function LinkDriver({driver, children}) {\n    const {driverId, givenName, familyName} = driver;\n\n    return (\n        <Link to={`/drivers/${driverId}`}>{children || `${givenName} ${familyName}`}</Link>\n    );\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\n\nLinkTeam.propTypes = {\n    team: PropTypes.object.isRequired\n};\n\nexport default function LinkTeam({team}) {\n    const {constructorId, name} = team;\n\n    return (\n        <Link to={`/teams/${constructorId}`}>{name}</Link>\n    );\n};\n","import React, {Fragment} from 'react';\nimport PropTypes from 'prop-types';\nimport LinkTeam from '../link/team';\n\nexport default function DriverTeams({teams}) {\n    return teams.map((team, i) => {\n        const {constructorId} = team;\n\n        return (\n            <Fragment key={constructorId}>\n                <LinkTeam team={team}/>\n                {i === teams.length - 1 ? '' : ', '}\n            </Fragment>\n        );\n    });\n}\n\nDriverTeams.propTypes = {\n    teams: PropTypes.array.isRequired\n};\n","import React from 'react';\nimport moment from 'moment';\nimport {Link} from 'react-router-dom';\nimport ReactDataTable, {createTheme} from 'react-data-table-component';\nimport classNames from 'classnames';\nimport LinkDriver from './link/driver';\nimport DriverTeams from './driver/teams';\n\nconst textColor = '#666';\nconst cellPadding = '16px 12px';\nconst customStyles = {\n    cells: {\n        style: {\n            padding: cellPadding,\n            lineHeight: 1.5\n        }\n    },\n    rows: {\n        style: {\n            fontSize: 16\n        }\n    },\n    headCells: {\n        style: {\n            fontSize: '.875rem',\n            padding: cellPadding,\n            textTransform: 'uppercase',\n            color: '#999'\n        }\n    }\n};\n\ncreateTheme('uk-table', {\n    text: {\n        primary: textColor,\n        secondary: textColor\n    },\n    striped: {\n        text: textColor\n    }\n});\n\nconst DataTable = (props) => (\n    <ReactDataTable\n        noHeader={true}\n        striped={true}\n        theme=\"uk-table\"\n        customStyles={customStyles}\n        {...props}\n    />\n);\n\nexport default DataTable;\n\nexport const roundCell = {\n    name: 'Round',\n    selector: 'round',\n    center: true,\n    grow: 0\n};\n\nexport const dateCell = {\n    name: 'Date',\n    selector: 'date',\n    format: ({date}) => moment(date).format('DD MMM YYYY')\n};\n\nexport const raceCell = {\n    name: 'Grand Prix',\n    selector: 'raceName',\n    grow: 2,\n    cell: ({season, round, raceName}) => (\n        <Link to={`/${season}/results/${round}`}>{raceName}</Link>\n    )\n};\n\nexport const locationCell = {\n    name: 'Location',\n    grow: 2,\n    cell: row => {\n        const {\n            Circuit: {\n                circuitName,\n                Location: {country, locality}\n            }\n        } = row;\n\n        return (\n            <div>\n                <div>{circuitName}</div>\n                <div>{locality}, {country}</div>\n            </div>\n        );\n    }\n};\n\nexport const positionCell = {\n    name: (() => {\n        return <abbr title=\"Position\">Pos</abbr>;\n    })(),\n    center: true,\n    grow: 0,\n    selector: 'position',\n    cell: ({positionText, position}) => {\n        const\n            pos = parseInt(positionText || position),\n            isRetired = isNaN(pos),\n            isPodium = !isRetired && pos >= 1 && pos <= 3;\n\n        return (\n            <span className={classNames({'uk-text-danger': isRetired, 'uk-text-success': isPodium})}>\n                {positionText || position}\n            </span>\n        );\n    }\n};\n\nexport const numberCell = {\n    name: (() => {\n        return <abbr title=\"Number\">No</abbr>;\n    })(),\n    selector: 'number',\n    center: true,\n    grow: 0\n};\n\nexport const nationalityCell = {\n    name: 'Nationality',\n    cell: ({Driver, Constructor}) => (Driver || Constructor).nationality\n};\n\nexport const driverCell = {\n    name: 'Driver',\n    cell: ({Driver}) => (\n        <LinkDriver driver={Driver}/>\n    )\n};\n\nexport const teamCell = {\n    name: 'Car',\n    cell: ({Constructor, Constructors}) => (\n        <DriverTeams teams={Constructors || [Constructor]}/>\n    ),\n    conditionalCellStyles: [{\n        when: ({Constructors}) => Constructors,\n        style: {\n            display: 'block'\n        }\n    }]\n};\n\nexport const lapsCell = {\n    name: 'Laps',\n    selector: 'laps',\n    center: true,\n    grow: 0\n};\n\nexport const timeCell = {\n    name: 'Time',\n    cell: ({Time, status}) => Time?.time || status || '--:--'\n};\n\nexport const winsCell = {\n    name: 'Wins',\n    selector: 'wins',\n    center: true\n};\n\nexport const pointsCell = {\n    name: 'Points',\n    selector: 'points',\n    center: true,\n    grow: 0,\n    style: {\n        fontWeight: 'bold'\n    }\n};\n\n","import axios from 'axios';\nimport localforage from 'localforage';\nimport {setup} from 'axios-cache-adapter';\n\nconst LIMIT = 1000;\n\nconst axiosInstances = [\n    axios.create({baseURL: '/api/f1/'}),\n    setup({\n        baseURL: 'https://ergast.com/api/f1/',\n        cache: {\n            maxAge: 60 * 60 * 1000 * (process.env.NODE_ENV === 'development' ? 24 : 1),\n            exclude: {\n                query: false\n            },\n            store: localforage.createInstance({\n                name: 'axios-cache',\n                version: 1\n            })\n        }\n    })\n];\n\naxiosInstances.forEach(instance => {\n    instance.interceptors.request.use(config => {\n        const {params, url} = config;\n\n        return {\n            ...config,\n            url: `${url}.json`,\n            params: {\n                limit: LIMIT,\n                ...params\n            }\n        };\n    });\n\n    instance.interceptors.response.use(response => {\n        const {data: {MRData}} = response;\n\n        return {\n            ...response,\n            data: MRData\n        };\n    });\n});\n\nexport {LIMIT};\nexport const [localApi, remoteApi] = axiosInstances;\n","import React, {Component} from 'react';\nimport axios from 'axios';\nimport {remoteApi} from '../../API';\n\nexport default function seasonWithData(WrappedComponent) {\n    return class extends Component {\n        state = {\n            busy: true,\n            data: {}\n        };\n\n        cancelSource = axios.CancelToken.source();\n\n        fetchData(url) {\n            this.setState({\n                busy: true\n            });\n\n            remoteApi.get(url, {\n                cancelToken: this.cancelSource.token\n            }).then(response => {\n                this.setState({\n                    busy: false,\n                    data: response.data\n                });\n            });\n        }\n\n        componentWillUnmount() {\n            this.cancelSource.cancel('Request cancelled');\n        }\n\n        render() {\n            // return table (wrapped) component and pass\n            // 1. local state: busy, data\n            // 2. route props of the wrapped component: history, location, match\n            // as it's props\n            return (\n                <WrappedComponent\n                    {...this.state}\n                    {...this.props}\n                    onReady={(url) => this.fetchData(url)}\n                />\n            );\n        }\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Spinner({text}) {\n    return (\n        <div className=\"uk-flex uk-flex-middle\">\n            <span data-uk-spinner=\"\"/>\n            <span className=\"uk-text-muted uk-padding-small uk-padding-remove-vertical\">\n                {text || 'Loading...'}\n            </span>\n        </div>\n    );\n}\n\nSpinner.propTypes = {\n    text: PropTypes.string\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport _ from 'lodash';\n\nCard.propTypes = {\n    primary: PropTypes.bool,\n    secondary: PropTypes.bool,\n    title: PropTypes.any\n};\n\nexport default function Card(props) {\n    const {primary, secondary, title, children} = props;\n\n    return (\n        <div className={classNames({\n            'uk-card': true,\n            'uk-card-primary': primary,\n            'uk-card-secondary': secondary,\n            'uk-card-default': !primary && !secondary\n        })}>\n            {title && (\n                <div className=\"uk-card-header\">\n                    <h3 className=\"uk-card-title\">\n                        {_.isFunction(title) ? title() : title}\n                    </h3>\n                </div>\n            )}\n            <div className=\"uk-card-body\">\n                {children}\n            </div>\n        </div>\n    );\n}\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faWikipediaW} from '@fortawesome/free-brands-svg-icons';\nimport axios from 'axios';\nimport Spinner from './spinner';\n\nexport default class Wiki extends Component {\n    static propTypes = {\n        url: PropTypes.string.isRequired\n    };\n\n    state = {\n        busy: true,\n        summary: null,\n        media: null\n    };\n\n    // cancelSource = axios.CancelToken.source();\n\n    componentDidMount() {\n        const\n            {url} = this.props,\n            {pathname} = new URL(url),\n            [, , path] = pathname.split('/');\n\n        axios.all([\n            axios.get(`https://en.wikipedia.org/api/rest_v1/page/summary/${path}`),\n            axios.get(`https://en.wikipedia.org/api/rest_v1/page/media-list/${path}`)\n        ]).then(axios.spread((S, M) => {\n            const {data: summary} = S, {data: media} = M;\n\n            this.setState({\n                busy: false,\n                summary,\n                media\n            });\n        }));\n    }\n\n    componentWillUnmount() {\n        // this.cancelSource.cancel('Request cancelled');\n    }\n\n    render() {\n        const {url, children} = this.props;\n        const {busy, summary, media} = this.state;\n\n        return busy ? <Spinner/> : (() => {\n            const\n                {title, extract_html: html, thumbnail: {source: src} = {}} = summary,\n                {items} = media,\n                {srcset: sources = []} = items[0] || {},\n                srcset = sources.map(({src, scale}) => `${src} ${scale}`);\n\n            return (\n                <div data-uk-grid=\"\" className=\"uk-grid-small\">\n                    {src && srcset && (\n                        <div className=\"uk-width-1-4@m\">\n                            <img\n                                data-src={src}\n                                data-srcset={srcset}\n                                data-uk-img=\"\"\n                                alt={title}\n                            />\n                        </div>\n                    )}\n                    <div className=\"uk-width-expand\">\n                        {html && <div dangerouslySetInnerHTML={{__html: html}}/>}\n\n                        <div>\n                            <FontAwesomeIcon icon={faWikipediaW}/>\n                            {' '}\n                            <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">Read more</a>\n                        </div>\n\n                        {children && <div className=\"uk-margin-top\">{children}</div>}\n                    </div>\n                </div>\n            );\n        })()\n    }\n}\n","import React, {useEffect, useState} from 'react';\nimport DataTable, {\n    roundCell,\n    dateCell,\n    raceCell,\n    locationCell,\n    driverCell,\n    teamCell,\n    lapsCell,\n    timeCell\n} from '../data-table';\nimport seasonWithData from './with-data';\nimport Spinner from '../spinner';\nimport Card from '../card';\nimport Wiki from '../wiki';\n\nconst SeasonResults = ({busy, data, match, onReady}) => {\n    const {params: {year}} = match;\n    const [url, setUrl] = useState('');\n\n    useEffect(() => {\n        onReady(`${year}/results/1`);\n        setUrl(`https://en.wikipedia.org/wiki/${year}_Formula_One_${year <= 1980 ? 'season' : 'World_Championship'}`);\n        // eslint-disable-next-line\n    }, [year]);\n\n    return busy ? <Spinner/> : (\n        <>\n            <h1 className=\"uk-text-uppercase\">{year} Race Results</h1>\n            <hr className=\"uk-divider-icon\"/>\n            <Card title=\"Summary\">\n                <Wiki url={url}/>\n            </Card>\n            <hr className=\"uk-divider-icon\"/>\n            {(() => {\n                const {RaceTable: {Races}} = data;\n                const tableColumns = [\n                    roundCell,\n                    dateCell,\n                    raceCell,\n                    locationCell,\n                    driverCell,\n                    teamCell,\n                    lapsCell,\n                    timeCell\n                ];\n                const tableData = Races.map(race => {\n                    const {Results: [result]} = race;\n                    return Object.assign({}, race, result);\n                });\n\n                return <DataTable\n                    keyField=\"round\"\n                    columns={tableColumns}\n                    data={tableData}\n                />;\n            })()}\n        </>\n    );\n};\n\nexport default seasonWithData(SeasonResults);\n","import React, {useEffect} from 'react';\nimport DataTable, {\n    positionCell,\n    nationalityCell,\n    driverCell,\n    teamCell,\n    winsCell,\n    pointsCell\n} from '../data-table';\nimport seasonWithData from './with-data';\nimport Spinner from '../spinner';\n\nconst SeasonDrivers = ({busy, data, match, onReady}) => {\n    const {params: {year}} = match;\n\n    useEffect(() => {\n        onReady(`${year}/driverStandings`);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [year]);\n\n    return (\n        <>\n            <h1 className=\"uk-text-uppercase\">{year} Driver Standings</h1>\n            {busy ? <Spinner/> : (() => {\n                const\n                    {StandingsTable: {StandingsLists: [StandingsList = {}]}} = data,\n                    {DriverStandings: tableData = []} = StandingsList,\n                    tableColumns = [\n                        positionCell,\n                        driverCell,\n                        nationalityCell,\n                        teamCell,\n                        winsCell,\n                        pointsCell\n                    ];\n\n                return <DataTable\n                    keyField=\"position\"\n                    columns={tableColumns}\n                    data={tableData}\n                />;\n            })()}\n        </>\n    );\n};\n\nexport default seasonWithData(SeasonDrivers);\n","import React, {useEffect} from 'react';\nimport DataTable, {\n    positionCell,\n    nationalityCell,\n    teamCell,\n    winsCell,\n    pointsCell\n} from '../data-table';\nimport seasonWithData from './with-data';\nimport Spinner from '../spinner';\n\nconst SeasonTeams = ({busy, data, match, onReady}) => {\n    const {params: {year}} = match;\n\n    useEffect(() => {\n        onReady(`${year}/constructorStandings`);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [year]);\n\n    return (\n        <>\n            <h1 className=\"uk-text-uppercase\">{year} Constructor Standings</h1>\n            {busy ? <Spinner/> : (() => {\n                const\n                    {StandingsTable: {StandingsLists: [StandingsList = {}]}} = data,\n                    {ConstructorStandings: tableData = []} = StandingsList,\n                    tableColumns = [\n                        positionCell,\n                        teamCell,\n                        nationalityCell,\n                        winsCell,\n                        pointsCell\n                    ];\n\n                return <DataTable\n                    keyField=\"position\"\n                    columns={tableColumns}\n                    data={tableData}\n                />;\n            })()}\n        </>\n    );\n};\n\nexport default seasonWithData(SeasonTeams);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport default function Alert({type, children}) {\n    return (\n        <div data-uk-alert=\"\" className={classNames({\n            'uk-alert uk-text-center': true,\n            [`uk-alert-${type}`]: type\n        })}>\n            {children || 'There are no results to display.'}\n        </div>\n    );\n}\n\nAlert.propTypes = {\n    type: PropTypes.oneOf([\n        'primary',\n        'success',\n        'warning',\n        'danger'\n    ])\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DataTable, {\n    driverCell,\n    lapsCell,\n    numberCell,\n    pointsCell,\n    positionCell,\n    teamCell,\n    timeCell\n} from '../data-table';\n\nexport default function GPRaceResult({race: {Results}}) {\n    const columns = [\n        positionCell,\n        numberCell,\n        driverCell,\n        teamCell,\n        lapsCell,\n        timeCell,\n        pointsCell\n    ], data = Results.map(result => {\n        const {Driver: {driverId}} = result;\n\n        result.driverId = driverId;\n\n        return result;\n    });\n\n    return <DataTable keyField=\"driverId\" {...{columns, data}}/>\n}\n\nGPRaceResult.propTypes = {\n    race: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DataTable, {\n    driverCell,\n    numberCell,\n    positionCell,\n    teamCell\n} from '../data-table';\n\nexport default function GPQualifying({race: {QualifyingResults = []}}) {\n    const columns = [\n        positionCell,\n        numberCell,\n        driverCell,\n        teamCell,\n        {name: 'Q1', selector: 'Q1'},\n        {name: 'Q2', selector: 'Q2'},\n        {name: 'Q3', selector: 'Q3'}\n    ], data = QualifyingResults.map(result => {\n        const {Driver: {driverId}} = result;\n\n        result.driverId = driverId;\n\n        return result;\n    });\n\n    return <DataTable keyField=\"driverId\" {...{columns, data}}/>\n}\n\nGPQualifying.propTypes = {\n    race: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DataTable, {\n    driverCell,\n    numberCell,\n    positionCell,\n    teamCell,\n    timeCell\n} from '../data-table';\n\nexport default function GPFastestLaps({race: {Results}}) {\n    const columns = [\n        positionCell,\n        numberCell,\n        driverCell,\n        teamCell,\n        {\n            name: 'Lap',\n            selector: 'lap'\n        },\n        timeCell,\n        {\n            name: 'Avg Speed (kph)',\n            selector: 'speed'\n        }\n    ], data = Results\n        .filter(result => result.FastestLap)\n        .sort((next, current) => {\n            const {FastestLap: {rank: rank1}} = next;\n            const {FastestLap: {rank: rank2}} = current;\n            return rank1 - rank2;\n        })\n        .map(result => {\n            const {\n                number,\n                Driver,\n                Constructor,\n                FastestLap: {\n                    rank,\n                    lap,\n                    Time,\n                    AverageSpeed: {speed}\n                }\n            } = result;\n            const {driverId} = Driver;\n\n            return {\n                position: rank,\n                number, lap, speed,\n                Driver, Constructor, Time,\n                driverId\n            };\n        });\n\n    return <DataTable keyField=\"driverId\" {...{columns, data}}/>\n}\n\nGPFastestLaps.propTypes = {\n    race: PropTypes.object.isRequired\n};\n","import moment from 'moment';\nimport _ from 'lodash';\n\n// todo: sort by qualifying results\nexport function normalizeResults(race) {\n    const {Results /*QualifyingResults*/} = race;\n    const isZero = ({grid}) => parseInt(grid) === 0;\n\n    Results.forEach(r => {\n        const\n            {grid} = r,\n            // need to re-calculate after update\n            grids = Results.map(({grid}) => parseInt(grid));\n\n        if (parseInt(grid) === 0) {\n            r.grid = (Math.max(...grids) + 1).toString();\n        }\n    });\n\n    Results.sort((next, current) => {\n        const\n            c = parseInt(current.grid),\n            n = parseInt(next.grid);\n\n        return (n > c)\n            ? 1\n            : (n < c) ? -1 : 0;\n    });\n\n    return Results\n        .filter(r => !isZero(r))\n        .concat(Results.filter(r => isZero(r)));\n}\n\n/**\n * @param {array} races\n * @returns {array}\n */\nexport function normalizeRaces(races = []) {\n    const arr = [];\n\n    // merge duplicate races with different results\n    races.forEach(race => {\n        const\n            {season, round} = race,\n            find = arr.find(({season: s, round: r}) => {\n                return s === season && r === round;\n            }),\n            i = arr.indexOf(find);\n\n        if (find) {\n            const {Results: r1} = find, {Results: r2} = race;\n            arr[i] = {...find, Results: r1.concat(r2)}; // merge results for the one race\n        } else {\n            arr.push(race);\n        }\n    });\n\n    return arr;\n}\n\n/**\n * Converts time string to ms\n *\n * Examples:\n * \"0.234\"     ->     234\n * \"1.234\"     ->    1234\n * \"1:1.234\"   ->   61234\n * \"1:1:1.234\" -> 3661234\n * etc.\n *\n * @param {string} timeString\n * @returns {number} milliseconds\n */\nexport function timeToMs(timeString) {\n    let [hms, ms] = timeString.split('.');\n    const parts = hms.split(':');\n\n    for (let i = 0; i < 3 - parts.length; i++) {\n        hms = '0:' + hms;\n    }\n\n    return moment.duration(`${hms}.${ms}`).as('ms');\n}\n\n/**\n * Converts array of seasons (years) to string\n *\n * Examples:\n * [] -> \"\"\n * [2001] -> \"2001\"\n * [2001, 2010] -> \"2001, 2010\"\n * [2001, 2002, 2003] -> \"2001-2003\"\n * [2001, 2005, 2006, 2007] -> \"2001, 2005-2007\"\n *\n * @param {array} years\n * @returns {string}\n */\nexport function yearsToStr(years) {\n    if (_.isArray(years) && years.length) {\n        const\n            minYear = Math.min(...years),\n            maxYear = Math.max(...years),\n            diff = _.difference(_.range(minYear, maxYear), years.map(Number));\n\n        let ranges = [];\n\n        diff.unshift(minYear - 1);\n        diff.push(maxYear + 1);\n\n        for (let i = 0; i < diff.length; i++) {\n            const\n                curr = diff[i], next = diff[i + 1],\n                sum = curr + 1, sub = next - 1;\n\n            next && sub >= sum && (ranges[i] = _.uniq([sum, sub]));\n        }\n\n        return ranges\n            .filter(Boolean) // remove empty elements\n            .map(a => a.join('–'))\n            .join(', ');\n    }\n\n    return '';\n}\n\n/**\n * @param {array} standings\n * @returns {array}\n */\n/*\nexport function getDecades(standings) {\n    const\n        years = standings.map(standing => standing.season), \n        min = Math.min(...years),\n        max = Math.max(...years);\n\n    return _.range(\n        min - (min % 10),\n        max - (max % 10) + 10,\n        10\n    );\n}\n*/\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DataTable, {\n    driverCell,\n    numberCell,\n    positionCell,\n    teamCell,\n    timeCell\n} from '../data-table';\nimport {normalizeResults} from '../../helpers';\n\nexport default function GPStartingGrid({race}) {\n    const columns = [\n        positionCell,\n        numberCell,\n        driverCell,\n        teamCell,\n        timeCell\n    ];\n\n    const\n        {QualifyingResults = []} = race,\n        results = normalizeResults(race);\n\n    const data = results\n        .map(result => {\n            const {\n                grid,\n                number,\n                Driver,\n                Constructor\n            } = result;\n            const {driverId} = Driver;\n            const {Q1, Q2, Q3} = QualifyingResults.find(({Driver: {driverId: id}}) => id === driverId) || {};\n\n            return {\n                position: grid,\n                number,\n                Driver, Constructor,\n                Time: {\n                    time: Q3 || Q2 || Q1\n                },\n                driverId\n            };\n        });\n\n    return <DataTable keyField=\"driverId\" {...{columns, data}}/>;\n}\n\nGPStartingGrid.propTypes = {\n    race: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DataTable, {\n    numberCell,\n    driverCell,\n    teamCell,\n    timeCell\n} from '../data-table';\n\nexport default function GPPitStops({race: {Results, PitStops = []}}) {\n    const columns = [\n        {\n            name: 'Stops',\n            selector: 'stop',\n            center: true,\n            grow: 0\n        },\n        numberCell,\n        driverCell,\n        teamCell,\n        {\n            name: 'Lap',\n            selector: 'lap',\n            center: true\n        },\n        timeCell,\n        {\n            name: 'Duration',\n            selector: 'duration'\n        }\n    ], data = PitStops.map(pitStop => {\n        const\n            {stop, lap, time, duration, driverId} = pitStop,\n            {number, Driver, Constructor} = Results.find(({Driver: {driverId: id}}) => id === driverId);\n\n        return {\n            id: `${driverId}-${lap}`,\n            stop, lap, duration, number,\n            Driver, Constructor, Time: {time}\n        };\n    });\n\n    return <DataTable {...{columns, data}}/>\n}\n\nGPPitStops.propTypes = {\n    race: PropTypes.object.isRequired\n};\n","import React, {useEffect, useRef, useState} from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport _ from 'lodash';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faClock} from '@fortawesome/free-regular-svg-icons';\nimport {\n    faPlay, faPause, faRedo,\n    faForward, faFastForward, faFastBackward,\n    faTrafficLight, faFlagCheckered\n} from '@fortawesome/free-solid-svg-icons';\nimport './v11n.scss';\nimport {normalizeResults, timeToMs} from '../../helpers';\nimport LinkDriver from '../link/driver';\nimport LinkTeam from '../link/team';\n\nfunction Button({title, onClick, children, ...attrs}) {\n    return (\n        <button\n            data-uk-tooltip={`title: ${title}; pos: bottom; delay: 100`}\n            className=\"uk-button uk-button-primary\"\n            onClick={onClick}\n            {...attrs}>\n            {children}\n        </button>\n    );\n}\n\nfunction Lap({lap}) {\n    const {number, order} = lap;\n\n    return (\n        <div id={`lap-${number}`} className=\"lap\" style={{order: order}}>\n            <small>\n                {number === 0\n                    ? <FontAwesomeIcon icon={order === 0 ? faTrafficLight : faFlagCheckered}/>\n                    : `Lap ${number}`\n                }\n            </small>\n        </div>\n    );\n}\n\nfunction GPV11n({race}) {\n    const\n        lapWidth = 100,\n        driverHeight = 30,\n        defaultDelay = 500,\n        speeds = [\n            ['Slower', defaultDelay + 250, faFastBackward],\n            ['Normal', defaultDelay, faForward],\n            ['Faster', defaultDelay - 250, faFastForward]\n        ];\n\n    const circuitEl = useRef(null);\n\n    const\n        [busy, setBusy] = useState(true),\n        [delay, setDelay] = useState(defaultDelay),\n        [grid, setGrid] = useState({\n            order: 0,\n            number: 0\n        }),\n        [drivers, setDrivers] = useState([]),\n\n        [laps, setLaps] = useState([]),\n        [currentLap, setCurrentLap] = useState(1),\n        [lapsCount, setLapsCount] = useState(0),\n        [lapsShown, setLapsShown] = useState(0),\n\n        [lights, setLights] = useState([]),\n        [showLights, setShowLights] = useState(false),\n\n        [raceStarted, setRaceStarted] = useState(false),\n        [racePaused, setRacePaused] = useState(false),\n        [raceFinished, setRaceFinished] = useState(false),\n\n        [winner, setWinner] = useState(),\n        [fastestLap, setFastestLap] = useState(),\n        [fastestPitStop, setFastestPitStop] = useState();\n\n    function init() {\n        let {Results, PitStops = [], Laps} = race;\n\n        Results = normalizeResults(race);\n\n        Laps.forEach((lap, i) => {\n            lap.order = i + 1;\n\n            setLaps(prevState => {\n                prevState[i] = lap;\n                return prevState;\n            });\n        });\n\n        Results.forEach(result => {\n            const {\n                grid,\n                Driver,\n                Constructor\n            } = result, css = {\n                width: lapWidth - (grid - 1),\n                top: (grid - 1) * driverHeight\n                // transition duration goes after start\n            };\n\n            setDrivers(prevState => {\n                return [\n                    ...prevState,\n                    {\n                        Driver,\n                        Constructor,\n                        css,\n                        fastestLap: false,\n                        pit: false,\n                        time: false\n                    }\n                ];\n            });\n        });\n\n        setDelay(defaultDelay);\n        setGrid({\n            order: 0,\n            number: 0\n        });\n        setCurrentLap(1);\n        setLapsCount(Laps.length);\n        setRaceStarted(false);\n        setRacePaused(false);\n        setRaceFinished(false);\n        setWinner(Results.find(({position}) => parseInt(position) === 1));\n        setFastestLap(Results.find(({FastestLap: {rank} = {}}) => parseInt(rank) === 1));\n        setFastestPitStop(() => {\n            const pitStop = PitStops.find((el, i, arr) => {\n                const times = arr.map(({duration}) => timeToMs(duration));\n                return timeToMs(el.duration) === Math.min(...times);\n            });\n\n            if (pitStop) {\n                const {driverId, lap, duration} = pitStop;\n                const {Driver, Constructor} = Results.find(({Driver: {driverId: id}}) => id === driverId);\n\n                return {\n                    lap,\n                    duration,\n                    Driver,\n                    Constructor\n                };\n            }\n        });\n        setBusy(false);\n    }\n\n    // INIT\n    useEffect(init, [race]);\n\n    // LAPS SHOWN\n    useEffect(() => {\n        const\n            modalEl = document.getElementById('modal'),\n            listener = () => {\n                setLapsShown(Math.floor(circuitEl.current['offsetWidth'] / lapWidth));\n            };\n\n        modalEl.addEventListener('shown', listener);\n\n        return () => {\n            modalEl.removeEventListener('shown', listener);\n        };\n    });\n\n    // LIGHTS\n    useEffect(() => {\n        let intervalId = null;\n\n        if (showLights) {\n            intervalId = setInterval(() => {\n                if (lights.length < 5) {\n                    setLights(prevState => {\n                        return [\n                            ...prevState,\n                            prevState.length + 1\n                        ];\n                    });\n                } else {\n                    setShowLights(false);\n                    setLights([]);\n                    setGrid(prevState => {\n                        prevState.order = lapsCount + 1;\n                        return prevState;\n                    });\n                    setRaceStarted(true);\n                }\n            }, delay);\n        } else {\n            clearInterval(intervalId);\n        }\n\n        return () => clearInterval(intervalId);\n    }, [showLights, lapsCount, lights, delay]);\n\n    // RACE\n    useEffect(() => {\n        let intervalId = null;\n\n        const\n            {Results, PitStops = []} = race,\n            step = Math.round(lapWidth * (lapsShown - 2) / lapsCount),\n            retiredDrivers = [];\n\n        if (raceStarted && !racePaused) {\n            intervalId = setInterval(() => {\n                if (currentLap <= lapsCount) {\n                    const\n                        isFinalLap = currentLap === lapsCount,\n                        {Timings} = laps.find(({number}) => currentLap === parseInt(number)),\n                        // get all actual times (ms)\n                        times = Timings.map(({time}) => timeToMs(time)),\n                        fastestTime = Math.min(...times); // ms\n\n                    // console.log(`--- LAP ${currentLap} ---`);\n\n                    if (currentLap <= lapsCount - lapsShown + 1) {\n                        setLaps(prevState => {\n                            const lap = prevState[currentLap - 1];\n\n                            lap.order = currentLap + lapsCount + 1;\n\n                            return prevState;\n                        });\n                    }\n\n                    Results.forEach(result => {\n                        const\n                            {\n                                position: pos,\n                                status,\n                                Driver: {driverId},\n                                FastestLap: {lap} = {},\n                                Time\n                            } = result,\n                            {\n                                time = '',\n                                position = 0\n                            } = {...Timings.find(({driverId: id}) => id === driverId)},\n                            ps = PitStops.find(({lap, driverId: id}) => parseInt(lap) === currentLap && id === driverId),\n                            xLaps = status.match(/\\+(\\d+)/),\n                            // driver is:\n                            order = position\n                                // fighting\n                                ? position\n                                // behind +X laps OR retired\n                                : (xLaps ? pos : -1),\n                            // calc time gap\n                            retired = order === -1,\n                            ms = retired ? 0 : timeToMs(time),\n                            timeDiff = ms - fastestTime,\n                            // calc the range gap between drivers based on the time gap\n                            offset = timeDiff === 0\n                                ? 0\n                                : (ms / fastestTime) * 100 - lapWidth;\n\n                        retired && retiredDrivers.indexOf(driverId) < 0 && retiredDrivers.push(driverId);\n\n                        setDrivers(prevState => {\n                            const\n                                drivers = [...prevState],\n                                i = drivers.findIndex(({Driver: {driverId: id}}) => id === driverId),\n                                driver = drivers[i],\n                                {css: {width: prevWidth}} = driver,\n                                width = retired\n                                    ? isFinalLap ? lapWidth : 0\n                                    : isFinalLap\n                                        ? (lapsShown - (xLaps ? xLaps[1] : 0) - 1) * lapWidth\n                                        : prevWidth + step - offset,\n                                top = retired\n                                    ? 'auto'\n                                    : (order - 1) * driverHeight,\n                                bottom = retired\n                                    ? retiredDrivers.indexOf(driverId) * driverHeight\n                                    : 'auto',\n                                transitionDuration = `${delay}ms`,\n                                css = {\n                                    width,\n                                    top,\n                                    bottom,\n                                    transitionDuration\n                                },\n                                fastestLap = lap && currentLap === parseInt(lap),\n                                pit = ps ? `Pit${ps.stop}` : false,\n                                time = isFinalLap ? (Time?.time || status) : false;\n\n                            drivers[i] = {\n                                ...driver,\n                                css,\n                                fastestLap,\n                                pit,\n                                time\n                            };\n\n                            return drivers;\n                        });\n                    });\n\n                    setCurrentLap(currentLap + 1);\n                    setRaceFinished(currentLap === lapsCount);\n                } else {\n                    setCurrentLap(lapsCount);\n                    setRaceStarted(false);\n                }\n            }, delay);\n        } else {\n            clearInterval(intervalId);\n        }\n\n        return () => clearInterval(intervalId);\n    }, [\n        race,\n        raceStarted,\n        racePaused,\n        drivers,\n        laps,\n        currentLap,\n        lapsShown,\n        lapsCount,\n        delay\n    ]);\n\n    if (busy) {\n        return null;\n    }\n\n    return (\n        <div data-uk-grid=\"\" className=\"uk-grid-small\">\n            <div className=\"uk-width-expand\">\n                <div id=\"visualization\">\n                    <div ref={circuitEl} id=\"circuit\" style={{\n                        // width: (lapWidth * lapsShown) + lapWidth,\n                        height: (Object.keys(drivers).length * driverHeight) + driverHeight\n                    }}>\n                        <div id=\"lights\" className={showLights ? '' : 'uk-hidden'}>\n                            {_.range(5).map(i => {\n                                const key = i + 1;\n\n                                return (\n                                    <div key={key} className={classNames({\n                                        'light': true,\n                                        'on': lights.includes(key)\n                                    })}/>\n                                );\n                            })}\n                            <div/>\n                        </div>\n\n                        <div id=\"drivers\">\n                            {drivers.map(driver => {\n                                const\n                                    {Driver, Constructor, css, fastestLap, pit, time} = driver,\n                                    {code, driverId, givenName, familyName} = Driver,\n                                    {constructorId, name: team} = Constructor;\n\n                                return (\n                                    <div key={driverId}\n                                        className=\"driver\"\n                                        title={`${givenName[0]}. ${familyName}, ${team}`}\n                                        style={css}>\n                                        <small className={classNames({'pit': true, 'uk-hidden': !pit})}>\n                                            {pit}\n                                        </small>\n                                        <small className={classNames({'fastest-lap': true, 'uk-hidden': !fastestLap})}>\n                                            <FontAwesomeIcon icon={faClock}/>\n                                        </small>\n                                        <small className={classNames({'time uk-text-truncate': true, 'uk-hidden': !time})}>\n                                            {time}\n                                        </small>\n                                        <small className={classNames({'team': true, [constructorId]: true})}>\n                                            {code}\n                                        </small>\n                                    </div>\n                                );\n                            })}\n                        </div>\n\n                        <div id=\"laps\">\n                            <Lap lap={grid}/>\n                            {laps.map(lap => <Lap key={lap.number} lap={lap}/>)}\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"uk-width-auto\">\n                <div className=\"uk-button-group uk-text-center\">\n                    {speeds.map((speed, key) => {\n                        const [t, d, i] = speed;\n\n                        return (\n                            <Button\n                                key={key}\n                                title={t}\n                                onClick={() => setDelay(d)}\n                                className=\"uk-button uk-button-secondary\"\n                                disabled={!raceStarted}>\n                                <FontAwesomeIcon icon={i}/>\n                            </Button>\n                        )\n                    })}\n                </div>\n\n                <div className=\"uk-margin-top uk-text-center\">\n                    {showLights || (\n                        raceStarted || raceFinished || (\n                            <Button\n                                title=\"Start\"\n                                onClick={() => setShowLights(true)}>\n                                <FontAwesomeIcon icon={faPlay}/>\n                            </Button>\n                        )\n                    )}\n\n                    {raceStarted && (\n                        <>\n                            {racePaused && (\n                                <Button\n                                    title=\"Resume\"\n                                    onClick={() => setRacePaused(false)}>\n                                    <FontAwesomeIcon icon={faPlay}/>\n                                </Button>\n                            )}\n\n                            {racePaused || (\n                                <Button\n                                    title=\"Pause\"\n                                    onClick={() => setRacePaused(true)}>\n                                    <FontAwesomeIcon icon={faPause}/>\n                                </Button>\n                            )}\n                        </>\n                    )}\n\n                    {raceFinished && (\n                        <Button\n                            title=\"Reset\"\n                            onClick={() => init()}>\n                            <FontAwesomeIcon icon={faRedo}/>\n                        </Button>\n                    )}\n                </div>\n\n                {raceFinished && (() => {\n                    const {Driver: D1, Constructor: C1} = winner;\n                    const {Driver: D2, Constructor: C2, FastestLap: {lap, Time: {time}}} = fastestLap;\n\n                    return (\n                        <dl className=\"uk-description-list uk-description-list-divider\">\n                            <dt>Winner:</dt>\n                            <dd>\n                                <LinkDriver driver={D1}/>, <LinkTeam team={C1}/>\n                            </dd>\n                            <dt>Fastest Lap:</dt>\n                            <dd>\n                                <LinkDriver driver={D2}/>, <LinkTeam team={C2}/>\n                                <div>{time}, Lap #{lap}</div>\n                            </dd>\n                            {fastestPitStop && (() => {\n                                const {Driver, Constructor, lap, duration} = fastestPitStop;\n\n                                return (\n                                    <>\n                                        <dt>Fastest Pit Stop:</dt>\n                                        <dd>\n                                            <LinkDriver driver={Driver}/>, <LinkTeam team={Constructor}/>\n                                            <div>{duration}s, Lap #{lap}</div>\n                                        </dd>\n                                    </>\n                                );\n                            })()}\n                        </dl>\n                    );\n                })()}\n            </div>\n        </div>\n    );\n}\n\nGPV11n.propTypes = {\n    race: PropTypes.object.isRequired\n};\n\nexport default GPV11n;\n","import React, {useState, useEffect} from 'react';\nimport {Link} from 'react-router-dom';\nimport axios from 'axios';\nimport Moment from 'react-moment';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faCalendar} from '@fortawesome/free-regular-svg-icons';\nimport {faMapMarkerAlt, faPlayCircle, faChevronLeft, faChevronRight} from '@fortawesome/free-solid-svg-icons';\nimport classNames from 'classnames';\n\nimport {localApi, remoteApi} from '../../API';\nimport Spinner from '../spinner';\nimport Alert from '../alert';\nimport GPRaceResult from './race-result';\nimport GPQualifying from './qualifying';\nimport GPFastestLaps from './fastest-laps';\nimport GPStartingGrid from './starting-grid';\nimport GPPitStops from './pit-stops';\nimport GPV11n from './v11n';\n// import GPHighlights from './highlights';\nimport Wiki from '../wiki';\nimport Card from '../card';\n\nconst Nav = ({year, race, next = true}) => {\n    const {round, raceName: name} = race || {};\n\n    return race ? (\n        <div className={classNames({\n            'uk-grid-small': true,\n            'uk-flex uk-flex-middle': true,\n            'uk-flex-right': next,\n            'uk-text-right': next\n        })} data-uk-grid=\"\">\n            <div className={classNames({\n                'uk-text-large': true,\n                'uk-flex-last': next\n            })}>\n                <FontAwesomeIcon icon={next ? faChevronRight : faChevronLeft}/>\n            </div>\n            <div>\n                <div className=\"uk-text-small\">Round {round}</div>\n                <Link to={`/${year}/results/${round}`} className=\"uk-text-bold\">{name}</Link>\n            </div>\n        </div>\n    ) : null;\n};\n\nconst GPDetails = ({match}) => {\n    const\n        {params: {year, round}} = match,\n        [busy, setBusy] = useState(true),\n        [races, setRaces] = useState([]),\n        [race, setRace] = useState();\n\n    useEffect(() => {\n        let isMounted = true;\n\n        const path = `${year}/${round}`;\n\n        setBusy(true);\n        setRaces([]);\n        setRace(null);\n\n        axios.all([\n            remoteApi.get(`${year}/results/1`),\n            // the first 3 are always there\n            remoteApi.get(`${path}/results`),\n            remoteApi.get(`${path}/qualifying`),\n            remoteApi.get(`${path}/pitstops`),\n            // except the laps\n            localApi.get(`${path}/laps`).catch(() => null)\n        ]).then(([results, ...rest]) => {\n            const {data: {RaceTable: {Races}}} = results;\n            const objects = [];\n\n            rest.forEach(response => {\n                const {\n                    data: {\n                        RaceTable: {\n                            Races: [obj] = []\n                        } = {}\n                    } = {}\n                } = response || {};\n\n                obj && objects.push(obj);\n            });\n\n            if (isMounted) {\n                objects.length && setRace(Object.assign({}, ...objects));\n                setRaces(Races);\n                setBusy(false);\n            }\n        }).catch((/*error*/) => {\n            // const {response: {status}} = error;\n            setBusy(false);\n        });\n\n        return () => {\n            isMounted = false;\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [year, round]);\n\n    function getPrevRace() {\n        return races.find(({round: r}) => round - r === 1);\n    }\n\n    function getNextRace() {\n        return races.find(({round: r}) => r - 1 === parseInt(round));\n    }\n\n    return (\n        <>\n            {busy ? <Spinner/> : (() => {\n                if (!race) {\n                    return <Alert/>;\n                }\n\n                const {\n                    url,\n                    season,\n                    date,\n                    raceName,\n                    Circuit: {\n                        circuitName,\n                        Location: {country, locality}\n                    },\n                    Laps = []\n                } = race;\n\n                return (\n                    <>\n                        <Card>\n                            <div className=\"uk-grid-small uk-flex uk-flex-middle\" data-uk-grid=\"\">\n                                <div className=\"uk-width-1-6@m\">\n                                    <Nav year={year} race={getPrevRace()} next={false}/>\n                                </div>\n                                <div className=\"uk-width-expand@m uk-text-center\">\n                                    <h1 className=\"uk-text-uppercase\">{season} {raceName}</h1>\n                                    <FontAwesomeIcon icon={faCalendar}/>{' '}\n                                    <Moment format=\"DD MMM YYYY\" className=\"uk-text-bold\">{date}</Moment> / Round {round}\n                                    <div>\n                                        <FontAwesomeIcon icon={faMapMarkerAlt}/>{' '}\n                                        {circuitName} / {locality}, {country}\n                                    </div>\n                                </div>\n                                <div className=\"uk-width-1-6@m\">\n                                    <Nav year={year} race={getNextRace()} next={true}/>\n                                </div>\n                            </div>\n                        </Card>\n                        <hr className=\"uk-divider-icon\"/>\n                        <Card>\n                            <Wiki url={url}/>\n                        </Card>\n                        <hr className=\"uk-divider-icon\"/>\n                        <div data-uk-grid=\"\" className=\"uk-grid-small\">\n                            <div className=\"uk-width-1-6@m\">\n                                <ul className=\"uk-tab-left\" data-uk-tab=\"connect: #contents; animation: uk-animation-fade\">\n                                    <li><a href=\"/\">Race Result</a></li>\n                                    <li><a href=\"/\">Qualifying</a></li>\n                                    <li><a href=\"/\">Starting Grid</a></li>\n                                    <li><a href=\"/\">Fastest Laps</a></li>\n                                    <li><a href=\"/\">Pit Stop Summary</a></li>\n                                </ul>\n\n                                {Laps.length > 0 && (\n                                    <div className=\"uk-visible@m\">\n                                        <button\n                                            data-uk-toggle=\"target: #modal\"\n                                            type=\"button\"\n                                            className=\"uk-button uk-button-secondary uk-button-small\">\n                                            <FontAwesomeIcon icon={faPlayCircle} className=\"uk-visible@l\"/>\n                                            {' '}Visualization\n                                            {' '}<span className=\"uk-text-lowercase\">&beta;</span>\n                                        </button>\n                                        <div data-uk-modal=\"\" id=\"modal\" className=\"uk-modal-container\">\n                                            <div className=\"uk-modal-dialog uk-modal-body\">\n                                                <GPV11n race={race}/>\n                                            </div>\n                                        </div>\n                                    </div>\n                                )}\n                            </div>\n                            <div className=\"uk-width-5-6@m\">\n                                <ul id=\"contents\" className=\"uk-switcher\">\n                                    <li>\n                                        <GPRaceResult race={race}/>\n                                    </li>\n                                    <li>\n                                        <GPQualifying race={race}/>\n                                    </li>\n                                    <li>\n                                        <GPStartingGrid race={race}/>\n                                    </li>\n                                    <li>\n                                        <GPFastestLaps race={race}/>\n                                    </li>\n                                    <li>\n                                        <GPPitStops race={race}/>\n                                    </li>\n                                </ul>\n                            </div>\n                        </div>\n                    </>\n                )\n            })()}\n        </>\n    );\n};\n\nexport default GPDetails;\n","import React, {Fragment, useEffect, useState} from 'react';\nimport {renderToString} from 'react-dom/server';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport classNames from 'classnames';\nimport Spinner from './spinner';\nimport Card from './card';\n\nconst Highlight = styled.span`\n    background-color: #FFFF33;\n    font-weight: bold;\n`;\n\nexport default function ItemList({heading, items, keys, onClick}) {\n    const\n        [data, setData] = useState(null),\n        [filter, setFilter] = useState(''),\n        regexp = new RegExp(`(${filter})`, 'ig');\n\n    useEffect(() => {\n        const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n\n        items.length && setData(() => {\n            const state = {};\n\n            letters.forEach(letter => {\n                state[letter] = items.filter(item => {\n                    const {[keys[0]]: str} = item;\n\n                    item.visible = true;\n\n                    return str.charAt(0) === letter;\n                });\n            });\n\n            return state;\n        });\n    }, [items, keys]);\n\n    function handleSearch(e) {\n        const f = (e?.target.value || '').trim().toLowerCase();\n\n        setFilter(f);\n\n        setData(prevState => {\n            const state = {};\n\n            Object.keys(prevState).forEach(letter => {\n                const array = prevState[letter];\n\n                array.forEach(item => {\n                    let found = 0;\n\n                    keys.forEach(key => {\n                        const {[key]: str} = item;\n                        found += Number(str.toLowerCase().includes(f));\n                    });\n\n                    item.visible = f ? found > 0 : true;\n                });\n\n                state[letter] = array;\n            });\n\n            return state;\n        });\n    }\n\n    let visibleCards = 0;\n\n    return (\n        <div className=\"uk-padding-small\">\n            {data ? (\n                <>\n                    <div data-uk-grid=\"\" className=\"uk-grid-small uk-flex uk-flex-middle\">\n                        <div className=\"uk-width-1-2 uk-width-3-5@m\">\n                            <h1 className=\"uk-text-uppercase\">{heading}</h1>\n                        </div>\n                        <div className=\"uk-width-1-2 uk-width-expand@m\">\n                            <form\n                                onSubmit={(e) => {e.preventDefault()}}\n                                className=\"uk-search uk-search-default uk-width-1-1\">\n                                <div>\n                                    <span className=\"uk-form-icon\" data-uk-icon=\"icon: search\"/>\n                                    <input\n                                        onChange={(e) => handleSearch(e)}\n                                        value={filter}\n                                        type=\"search\"\n                                        className=\"uk-input\"\n                                        placeholder=\"Search...\"\n                                    />\n                                    {filter && (\n                                        <a\n                                            href=\"/\"\n                                            className=\"uk-form-icon uk-form-icon-flip\"\n                                            onClick={(e) => {\n                                                e.preventDefault();\n                                                handleSearch()\n                                            }}>\n                                            <span data-uk-icon=\"icon: close\"/>\n                                        </a>\n                                    )}\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                    <div\n                        data-uk-grid=\"\"\n                        data-uk-height-match=\"target: > div > .uk-card\"\n                        className=\"uk-grid-small uk-grid-match\">\n                        {Object.keys(data).map(letter => {\n                            const\n                                itemsArray = data[letter],\n                                visibleItemsCount = itemsArray.filter(item => item.visible).length,\n                                showCard = visibleItemsCount > 0;\n\n                            visibleCards += Number(showCard);\n\n                            return showCard > 0 ? (\n                                <div key={letter} className=\"uk-width-1-5@m\">\n                                    <Card title={() => {\n                                        return (\n                                            <>\n                                                <span className=\"uk-text-large\">{letter}</span>\n                                                <small>({itemsArray.length})</small>\n                                            </>\n                                        );\n                                    }}>\n                                        <dl className=\"uk-margin-remove uk-overflow-auto\" style={{maxHeight: 240}}>\n                                            {itemsArray.map(item => {\n                                                const {driverId, constructorId, visible} = item;\n                                                const item$ = {...item};\n                                                const id = driverId || constructorId;\n\n                                                filter && keys.forEach(key => {\n                                                    const {[key]: str} = item$;\n\n                                                    // just replace string value(s)\n                                                    // equivalent to:\n                                                    // item.prop = test ? item.prop.replace(...) : item.prop\n                                                    item$[key] = regexp.test(str)\n                                                        ? str.replace(\n                                                            regexp,\n                                                            renderToString(<Highlight>$1</Highlight>)\n                                                        )\n                                                        : str;\n                                                });\n\n                                                return (\n                                                    <dd\n                                                        key={`item-${id}`}\n                                                        className={classNames({'uk-text-truncate': true, 'uk-hidden': !visible})}>\n                                                        <a\n                                                            href=\"/\"\n                                                            title={keys.map(key => item[key]).join(', ')}\n                                                            onClick={(e) => {\n                                                                e.preventDefault();\n                                                                onClick(item);\n                                                            }}\n                                                        >\n                                                            {keys.map((key, j) => {\n                                                                return (\n                                                                    <Fragment key={`${key}-${id}`}>\n                                                                        <span dangerouslySetInnerHTML={{__html: item$[key]}}/>\n                                                                        {j === keys.length - 1 ? '' : ', '}\n                                                                    </Fragment>\n                                                                );\n                                                            })}\n                                                        </a>\n                                                    </dd>\n                                                );\n                                            })}\n                                        </dl>\n                                    </Card>\n                                </div>\n                            ) : null;\n                        })}\n                    </div>\n\n                    {visibleCards === 0 && (\n                        <div className=\"uk-text-center uk-margin-medium\">\n                            No matching results found for <b>&laquo;{filter}&raquo;</b>\n                        </div>\n                    )}\n                </>\n            ) : <Spinner/>}\n        </div>\n    );\n}\n\nItemList.propTypes = {\n    heading: PropTypes.string.isRequired,\n    items: PropTypes.array.isRequired,\n    keys: PropTypes.array.isRequired,\n    onClick: PropTypes.func.isRequired\n};\n","import React, {useEffect, useState} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {remoteApi} from '../../API';\nimport ItemList from '../item-list';\n\nexport default function DriverList() {\n    const\n        history = useHistory(),\n        [drivers, setDrivers] = useState([]);\n\n    useEffect(() => {\n        let isMounted = true;\n\n        remoteApi.get('drivers').then(response => {\n            const {data: {DriverTable: {Drivers}}} = response;\n            isMounted && setDrivers(Drivers);\n        });\n\n        return () => {\n            isMounted = false;\n        };\n    }, []);\n\n    return <ItemList\n        heading=\"Drivers\"\n        items={drivers}\n        keys={['familyName', 'givenName']}\n        onClick={(driver) => history.push(`/drivers/${driver.driverId}`)}\n    />;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faInfoCircle} from '@fortawesome/free-solid-svg-icons';\nimport Spinner from '../spinner';\nimport Card from '../card';\n\nconst Leader = ({label, primary, secondary}) => {\n    return (\n        <div className=\"uk-grid-small\" data-uk-grid=\"\">\n            <div className=\"uk-width-expand\" data-uk-leader=\"\">{label}</div>\n            <div>\n                <span className=\"uk-text-bold\">{primary}</span>\n                {' '}\n                {secondary && <span className=\"uk-text-muted\">({secondary})</span>}\n            </div>\n        </div>\n    );\n};\n\nexport default function DriverRecords({standings, races}) {\n    const\n        {busy: loadingStandings, data: Standings} = standings,\n        {busy: loadingRaces, data: Races} = races;\n\n    function round(num, exp = 2) {\n        const pow = Math.pow(10, exp);\n        return Math.round((num + Number.EPSILON) * pow) / pow;\n    }\n\n    function getTitles() {\n        return Standings.filter(({DriverStandings, ConstructorStandings}) => {\n            const [{position}] = (DriverStandings || ConstructorStandings);\n            return parseInt(position) === 1;\n        }).length;\n    }\n\n    function getPoles() {\n        return Races.filter(({Results: [{grid}]}) => parseInt(grid) === 1).length;\n    }\n\n    function getTotalOf(prop) {\n        return Standings.map(({DriverStandings, ConstructorStandings}) => {\n            const [standing] = (DriverStandings || ConstructorStandings);\n            return parseInt(standing[prop]);\n        }).reduce((total, num) => total + num, 0);\n    }\n\n    function getPodiums() {\n        return Races.filter(({Results: [{position}]}) => parseInt(position) <= 3).length;\n    }\n\n    function getFastestLaps() {\n        return Races.filter(race => {\n            const {Results: [{FastestLap: {rank} = {}}]} = race;\n            return parseInt(rank) === 1;\n        }).length;\n    }\n\n    function getFinishes(top10 = false) {\n        return Races.filter(({Results: [{positionText}]}) => {\n            const position = parseInt(positionText);\n            return top10 ? position <= 10 : position > 0;\n        }).length;\n    }\n\n    return (\n        <Card title=\"Records\">\n            {loadingStandings && loadingRaces ? <Spinner text=\"Loading records...\"/> : (() => {\n                const\n                    entries = Races.length,\n                    finishes = getFinishes(),\n                    top10 = getFinishes(true),\n                    wins = getTotalOf('wins');\n\n                return (\n                    <>\n                        <Leader label=\"Championships\" primary={getTitles()}/>\n                        <Leader label=\"Entries\" primary={entries}/>\n                        <Leader\n                            label=\"Finishes overall\"\n                            primary={finishes}\n                            /*secondary={`${round(finishes * 100 / entries)}%`}*/\n                        />\n                        <Leader\n                            label=\"Finishes in Top 10\"\n                            primary={top10}\n                            /*secondary={`${round(top10 * 100 / entries)}%`}*/\n                        />\n                        <Leader\n                            label=\"Wins\"\n                            primary={wins}\n                            /*secondary={`${round(wins * 100 / entries)}%`}*/\n                        />\n                        <Leader label=\"Pole positions\" primary={getPoles()}/>\n                        <Leader label=\"Podiums\" primary={getPodiums()}/>\n                        <Leader label=\"Points\" primary={getTotalOf('points')}/>\n                        <Leader label=\"Fastest laps\" primary={getFastestLaps()}/>\n\n                        <div className=\"uk-text-muted uk-margin-top\">\n                            <FontAwesomeIcon icon={faInfoCircle}/> Some items may be inaccurate.\n                        </div>\n                    </>\n                );\n            })()}\n        </Card>\n    );\n}\n\nDriverRecords.propTypes = {\n    standings: PropTypes.object.isRequired,\n    races: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport DataTable, {\n    driverCell,\n    teamCell,\n    timeCell,\n    pointsCell,\n    positionCell\n} from '../data-table';\nimport Card from '../card';\n\nconst columns = [\n    driverCell,\n    teamCell,\n    timeCell,\n    pointsCell,\n    positionCell\n];\n\nexport default function DriverResults({races}) {\n    return (\n        <div\n            data-uk-grid=\"\"\n            data-uk-height-match=\"target: > div > .uk-card\"\n            className=\"uk-grid-small\">\n            {races.map(race => {\n                const {season, round, date, raceName, Results: data} = race;\n                const key = `${season}-${round}-results`;\n\n                data.forEach(row => {\n                    const {Driver: {driverId}} = row;\n                    row.id = `${key}-${driverId}`;\n                });\n\n                return (\n                    <div key={key} className=\"uk-width-1-2@m\">\n                        <Card title={() => {\n                            return (\n                                <>\n                                    <div>{raceName}</div>\n                                    <div className=\"uk-text-muted uk-text-small\">\n                                        Round {round}, {moment(date).format('DD MMM YYYY')}\n                                    </div>\n                                </>\n                            );\n                        }}>\n                            <DataTable {...{columns, data}}/>\n                        </Card>\n                    </div>\n                );\n            })}\n        </div>\n    );\n}\n\nDriverResults.propTypes = {\n    races: PropTypes.array.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport {faTrophy} from '@fortawesome/free-solid-svg-icons';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport DataTable, {pointsCell, teamCell, winsCell} from '../data-table';\n\nexport default function DriverStandings({standings}) {\n    const columns = [\n        {\n            name: 'Season',\n            selector: 'season',\n            center: true,\n            grow: 0\n        },\n        {\n            name: 'Rounds',\n            center: true,\n            selector: 'round'\n        },\n        teamCell,\n        winsCell,\n        pointsCell,\n        {\n            name: 'Pos',\n            selector: 'position',\n            center: true,\n            grow: 0,\n            cell: ({position, positionText}) => {\n                const pos = parseInt(positionText || position);\n\n                return (\n                    <span className={classNames({\n                        'uk-text-danger': isNaN(pos),\n                        'uk-text-warning': pos === 1\n                    })}>\n                        {pos === 1 ? <FontAwesomeIcon icon={faTrophy}/> : pos || positionText}\n                    </span>\n                );\n            }\n        }\n    ];\n\n    const data = standings.map(standing => {\n        const {\n            season, round,\n            DriverStandings, ConstructorStandings\n        } = standing;\n        const [{\n            position, positionText, points, wins,\n            Constructor, Constructors\n        }] = (DriverStandings || ConstructorStandings);\n\n        return {\n            id: `${season}-standing`,\n            season,\n            round,\n            position,\n            positionText,\n            wins,\n            points,\n            Constructor,\n            Constructors,\n        };\n    });\n\n    return <DataTable {...{columns, data}}/>;\n}\n\nDriverStandings.propTypes = {\n    standings: PropTypes.array.isRequired\n};\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport {LIMIT, remoteApi} from '../API';\nimport Alert from './alert';\nimport Spinner from './spinner';\nimport DriverResults from './driver/results';\nimport DriverStandings from './driver/standings';\nimport {normalizeRaces} from '../helpers';\n\nexport default class Standings extends Component {\n    static propTypes = {\n        input: PropTypes.object.isRequired,\n        onReady: PropTypes.func.isRequired\n    };\n\n    state = {\n        standings: {\n            busy: true,\n            data: []\n        },\n        races: {\n            busy: true,\n            data: []\n        },\n        season: null\n    };\n\n    cancelSource = axios.CancelToken.source();\n\n    componentDidMount() {\n        const\n            {input: {id, model}} = this.props,\n            key = `${model}s/${id}`,\n            config = {cancelToken: this.cancelSource.token};\n\n        axios.all([\n            remoteApi.get(`${key}/${model}Standings`, config),\n            remoteApi.get(`${key}/results`, config)\n        ]).then(responses => {\n            const\n                [S, R] = responses,\n                {data: {StandingsTable: {StandingsLists: Standings}}} = S,\n                {data: {total, RaceTable: {Races}}} = R, // get first page of races\n                pages = Math.ceil(total / LIMIT) - 1; // find rest pages of races\n\n            this.setState(state => {\n                return {\n                    ...state,\n                    standings: {\n                        busy: false,\n                        data: Standings\n                    },\n                    races: {\n                        busy: pages > 0,\n                        data: Races\n                    }\n                };\n            });\n\n            return pages;\n        }).then(pages => {\n            if (pages > 0) {\n                for (let i = 1; i <= pages; i++) {\n                    remoteApi.get(`${key}/results`, {\n                        ...config,\n                        params: {offset: i * LIMIT}\n                    }).then(response => {\n                        const {data: {RaceTable: {Races}}} = response;\n\n                        this.setState(state => {\n                            const {races: {data}} = state;\n\n                            return {\n                                ...state,\n                                races: {\n                                    busy: i < pages,\n                                    data: data.concat(Races)\n                                }\n                            };\n                        });\n                    });\n                }\n            }\n        });\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const {onReady} = this.props;\n        onReady(this.state);\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const {races: {busy}} = nextState;\n        return busy === false;\n    }\n\n    componentWillUnmount() {\n        this.cancelSource.cancel('Request cancelled');\n    }\n\n    setSeason(e, season = null) {\n        e.preventDefault();\n\n        this.setState(state => ({\n            ...state,\n            season\n        }));\n    }\n\n    render() {\n        const {input: {id}} = this.props;\n        const {\n            standings: {busy: loadingStandings, data: standings},\n            races: {busy: loadingRaces},\n            season\n        } = this.state;\n\n        let {races: {data: races}} = this.state;\n\n        // merge duplicate races with different results\n        loadingRaces || (races = normalizeRaces(races));\n\n        return (\n            <>\n                <hr className=\"uk-divider-icon\"/>\n\n                {loadingStandings\n                    ? <Spinner text=\"Loading standings...\"/>\n                    : (standings.length > 0 ? (\n                        <div data-uk-grid=\"\" className=\"uk-grid-small\">\n                            <div className=\"uk-width-1-6@m\">\n                                <ul data-uk-tab=\"\" className=\"uk-tab-left\">\n                                    <li>\n                                        <a\n                                            href=\"/\"\n                                            onClick={(e) => this.setSeason(e)}>\n                                            Standings\n                                        </a>\n                                    </li>\n\n                                    {standings.map(({season}) =>\n                                        <li key={`${id}-${season}-standings`}>\n                                            <a\n                                                href=\"/\"\n                                                onClick={(e) => this.setSeason(e, season)}>\n                                                Season {season}\n                                            </a>\n                                        </li>\n                                    )}\n                                </ul>\n                            </div>\n                            <div className=\"uk-width-5-6@m\">\n                                {season\n                                    ? loadingRaces\n                                        ? <Spinner/>\n                                        : <DriverResults races={races.filter(({season: s}) => s === season)}/>\n                                    : <DriverStandings standings={standings}/>\n                                }\n                            </div>\n                        </div>\n                ) : <Alert/>)}\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {yearsToStr} from '../helpers';\n\nActiveYears.propTypes = {\n    standings: PropTypes.array.isRequired\n};\n\nexport default function ActiveYears({standings}) {\n    const years = standings.map(({season}) => season);\n\n    return (\n        <>\n            {years.length} <span className=\"uk-text-muted\">({yearsToStr(years)})</span>\n        </>\n    );\n}\n","import React, {useEffect, useState} from 'react';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport Moment from 'react-moment';\nimport {remoteApi} from '../../API';\nimport Spinner from '../spinner';\nimport Alert from '../alert';\nimport Wiki from '../wiki';\nimport Card from '../card';\nimport DriverTeams from './teams';\nimport DriverRecords from './records';\nimport Standings from '../standings';\nimport ActiveYears from '../active-years';\n\nexport default function DriverDetails({match}) {\n    const\n        {params: {driverId}} = match,\n        [busy, setBusy] = useState(true),\n        [driver, setDriver] = useState(),\n        [standings, setStandings] = useState({busy: true, data: []}),\n        [races, setRaces] = useState({busy: true, data: []});\n\n    useEffect(() => {\n        let isMounted = true;\n\n        remoteApi.get(`drivers/${driverId}`).then(response => {\n            const {data: {DriverTable: {Drivers: [Driver]}}} = response;\n\n            if (isMounted) {\n                setDriver(Driver);\n                setBusy(false);\n            }\n        });\n\n        return () => {\n            isMounted = false;\n        };\n    }, [driverId]);\n\n    function getTeamsList() {\n        const {data} = standings;\n\n        let teams = data\n            .map(({DriverStandings: [{Constructors}]}) => Constructors)\n            .flat();\n\n        teams = _.sortBy(_.uniqWith(teams, _.isEqual), 'name');\n\n        return <DriverTeams teams={teams}/>;\n    }\n\n    return (\n        <div className=\"uk-padding-small\">\n            {busy ? <Spinner text=\"Loading driver details\"/> : (() => {\n                return driver ? (() => {\n                    const {url, familyName, givenName, nationality, dateOfBirth} = driver;\n                    const age = moment().diff(moment(dateOfBirth), 'years');\n\n                    return (\n                        <>\n                            <h1 className=\"uk-text-uppercase\">{givenName} {familyName}</h1>\n                            <hr className=\"uk-divider-icon\"/>\n                            <div\n                                data-uk-grid=\"\"\n                                data-uk-height-match=\"target: > div > .uk-card\"\n                                className=\"uk-grid-small\">\n                                <div className=\"uk-width-3-4@m\">\n                                    <Card title=\"Summary\">\n                                        <Wiki url={url}>\n                                            {(() => {\n                                                const {busy, data} = standings;\n\n                                                return busy ? <Spinner text=\"Loading personal info...\"/> : (\n                                                    <div data-uk-grid=\"\" className=\"uk-grid-small\">\n                                                        <div className=\"uk-width-auto@m\">\n                                                            <b>Born:</b> <Moment format=\"DD MMMM YYYY\">{dateOfBirth}</Moment>\n                                                            {' '}<span className=\"uk-text-muted\">(age {age})</span>\n                                                            <br/>\n                                                            <b>Nationality:</b> {nationality}\n                                                        </div>\n                                                        <div className=\"uk-width-expand\">\n                                                            <b>Seasons:</b> <ActiveYears standings={data}/>\n                                                            <br/>\n                                                            <b>Teams:</b> {getTeamsList()}\n                                                        </div>\n                                                    </div>\n                                                );\n                                            })()}\n                                        </Wiki>\n                                    </Card>\n                                </div>\n                                <div className=\"uk-width-1-4@m\">\n                                    <DriverRecords standings={standings} races={races}/>\n                                </div>\n                            </div>\n                            <Standings\n                                input={{id: driverId, model: 'driver'}}\n                                onReady={({standings, races}) => {\n                                    setStandings(standings);\n                                    setRaces(races);\n                                }}\n                            />\n                        </>\n                    );\n                })() : <Alert>Driver not found.</Alert>\n            })()}\n        </div>\n    )\n}\n","import React, {useEffect, useState} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {remoteApi} from '../../API';\nimport ItemList from '../item-list';\n\nexport default function TeamList() {\n    const\n        history = useHistory(),\n        [teams, setTeams] = useState([]);\n\n    useEffect(() => {\n        let isMounted = true;\n\n        remoteApi.get('constructors').then(response => {\n            const {data: {ConstructorTable: {Constructors: Teams}}} = response;\n            isMounted && setTeams(Teams);\n        });\n\n        return () => {\n            isMounted = false;\n        };\n    }, []);\n\n    return <ItemList\n        heading=\"Teams\"\n        items={teams}\n        keys={['name']}\n        onClick={team => history.push(`/teams/${team.constructorId}`)}\n    />;\n}\n","import React, {Fragment} from 'react';\nimport PropTypes from 'prop-types';\nimport LinkDriver from '../link/driver';\n\nexport default function TeamDrivers({drivers}) {\n    return drivers.map((driver, i) => {\n        const {driverId} = driver;\n\n        return (\n            <Fragment key={driverId}>\n                <LinkDriver driver={driver}/>\n                {i === drivers.length - 1 ? '' : ', '}\n            </Fragment>\n        );\n    });\n}\n\nTeamDrivers.propTypes = {\n    drivers: PropTypes.array.isRequired\n};\n","import React, {useState, useEffect} from 'react';\nimport _ from 'lodash';\nimport {remoteApi} from '../../API';\nimport Alert from '../alert';\nimport Wiki from '../wiki';\nimport Card from '../card';\nimport Spinner from '../spinner';\nimport Standings from '../standings';\nimport ActiveYears from '../active-years';\nimport TeamDrivers from './drivers';\nimport DriverRecords from '../driver/records';\n\nexport default function TeamDetails({match}) {\n    const\n        {params: {teamId}} = match,\n        [busy, setBusy] = useState(true),\n        [team, setTeam] = useState(),\n        [standings, setStandings] = useState({busy: true, data: []}),\n        [races, setRaces] = useState({busy: true, data: []});\n\n    useEffect(() => {\n        let isMounted = true;\n\n        remoteApi.get(`constructors/${teamId}`).then(response => {\n            const {data: {ConstructorTable: {Constructors: [Team]}}} = response;\n\n            if (isMounted) {\n                setTeam(Team);\n                setBusy(false);\n            }\n        });\n\n        return () => {\n            isMounted = false;\n        };\n    }, [teamId]);\n\n    function getDriversList() {\n        const {data} = races;\n\n        let drivers = data\n            .map(({Results}) => Results.map(({Driver}) => Driver))\n            .flat();\n\n        drivers = _.sortBy(_.uniqWith(drivers, _.isEqual), 'familyName');\n\n        return <TeamDrivers drivers={drivers}/>;\n    }\n\n    return (\n        <div className=\"uk-padding-small\">\n            {busy ? <Spinner text=\"Loading team details\"/> : (() => {\n                return team ? (() => {\n                    const {url, name, nationality} = team;\n\n                    return (\n                        <>\n                            <h1 className=\"uk-text-uppercase\">{name}</h1>\n                            <hr className=\"uk-divider-icon\"/>\n                            <div\n                                data-uk-grid=\"\"\n                                data-uk-height-match=\"target: > div > .uk-card\"\n                                className=\"uk-grid-small\">\n                                <div className=\"uk-width-3-4@m\">\n                                    <Card title=\"Summary\">\n                                        <Wiki url={url}>\n                                            {(() => {\n                                                const {busy, data} = standings;\n\n                                                return busy ? <Spinner/> : (\n                                                    <>\n                                                        <b>Nationality:</b> {nationality}\n                                                        <br/>\n                                                        <b>Seasons:</b> <ActiveYears standings={data}/>\n                                                        <br/>\n                                                        <b>Drivers:</b> {getDriversList()}\n                                                    </>\n                                                );\n                                            })()}\n                                        </Wiki>\n                                    </Card>\n                                </div>\n                                <div className=\"uk-width-1-4@m\">\n                                    <DriverRecords standings={standings} races={races}/>\n                                </div>\n                            </div>\n                            <Standings\n                                input={{id: teamId, model: 'constructor'}}\n                                onReady={({standings, races}) => {\n                                    setStandings(standings);\n                                    setRaces(races);\n                                }}\n                            />\n                        </>\n                    );\n                })() : <Alert>Team not found.</Alert>\n            })()}\n        </div>\n    );\n}\n","import React, {useState, useEffect} from 'react';\nimport {remoteApi} from '../../API';\nimport Spinner from '../spinner';\nimport Wiki from '../wiki';\nimport Card from '../card';\n\nexport default function CircuitList() {\n    const\n        [busy, setBusy] = useState(true),\n        [circuits, setCircuits] = useState([]);\n\n    useEffect(() => {\n        let isMounted = true;\n\n        remoteApi.get('circuits').then(response => {\n            const {data: {CircuitTable: {Circuits}}} = response;\n\n            if (isMounted) {\n                setCircuits(Circuits);\n                setBusy(false);\n            }\n        });\n\n        return () => {\n            isMounted = false;\n        };\n    }, []);\n\n    return (\n        <div className=\"uk-padding-small\">\n            {busy ? <Spinner/> : (\n                <>\n                    <h1 className=\"uk-text-uppercase\">Circuits</h1>\n                    <div\n                        data-uk-grid=\"\"\n                        data-uk-height-match=\"target: > div > .uk-card\"\n                        className=\"uk-grid-small\">\n                        {circuits.map(circuit => {\n                            const {circuitId: id, circuitName: name, url} = circuit;\n\n                            return (\n                                <div key={id} className=\"uk-width-1-2@m\">\n                                    <Card title={name}>\n                                        <Wiki url={url}/>\n                                    </Card>\n                                </div>\n                            );\n                        })}\n                    </div>\n                </>\n            )}\n        </div>\n    );\n}\n","import React from 'react';\nimport {Switch, Route, Redirect} from 'react-router-dom';\n// import styled from 'styled-components';\nimport Navbar from './components/navbar';\nimport Footer from './components/footer';\nimport SeasonLayout, {minYear, currentYear} from './components/season/layout';\nimport SeasonResults from './components/season/results';\nimport SeasonDrivers from './components/season/drivers';\nimport SeasonTeams from './components/season/teams';\nimport GPDetails from './components/gp/details';\nimport DriverList from './components/driver/list';\nimport DriverDetails from './components/driver/details';\nimport TeamList from './components/team/list';\nimport TeamDetails from './components/team/details';\nimport CircuitList from './components/circuit/list';\n// import CircuitDetails from './components/circuit/details';\n\nimport 'uikit/dist/css/uikit.min.css';\nimport UIkit from 'uikit';\nimport icons from 'uikit/dist/js/uikit-icons.min';\n\nUIkit.use(icons);\n\nconst SeasonRouteWrapper = ({component: Component, ...rest}) => {\n    return (\n        <Route {...rest} render={props =>\n            <SeasonLayout {...props}>\n                <Component {...props}/>\n            </SeasonLayout>\n        }/>\n    );\n};\n\nfunction App() {\n    return (\n        <div className=\"uk-flex uk-flex-column uk-height-viewport\">\n            <header>\n                <Navbar/>\n            </header>\n\n            <main style={{flexGrow: 1}}>\n                <Switch>\n                    <SeasonRouteWrapper exact path=\"/:year(\\d+)/results\" component={SeasonResults}/>\n                    <SeasonRouteWrapper exact path=\"/:year(\\d+)/results/:round(\\d+)\" component={GPDetails}/>\n\n                    <SeasonRouteWrapper path=\"/:year(\\d+)/drivers\" component={SeasonDrivers}/>\n                    <SeasonRouteWrapper path=\"/:year(\\d+)/teams\" component={SeasonTeams}/>\n\n                    <Route exact path=\"/:year(\\d+)\" render={({match}) => {\n                        let {params: {year}} = match;\n\n                        // must be 1950 >= year =< 2020\n                        (year < minYear || year > currentYear) && (year = currentYear);\n\n                        return <Redirect to={`/${year}/results`}/>;\n                    }}/>\n\n                    <Route exact path=\"/circuits\" component={CircuitList}/>\n                    {/*<Route exact path=\"/circuits/:circuitId([a-z-_]+)\" component={CircuitDetails}/>*/}\n\n                    <Route exact path=\"/teams\" component={TeamList}/>\n                    <Route exact path=\"/teams/:teamId([a-z0-9-_]+)\" component={TeamDetails}/>\n\n                    <Route exact path=\"/drivers\" component={DriverList}/>\n                    <Route exact path=\"/drivers/:driverId([a-z0-9-_]+)\" component={DriverDetails}/>\n\n                    <Redirect exact from=\"/\" to={`/${currentYear}/results`}/>\n\n                    <Route render={() => (\n                        <h1 className=\"uk-padding-small uk-margin-remove uk-text-center\">Page not found. Sorry.</h1>\n                    )}/>\n                </Switch>\n            </main>\n\n            <footer>\n                <Footer/>\n            </footer>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport store from './redux/store';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <Router>\n                <App/>\n            </Router>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/logo.bbb67440.svg\";"],"sourceRoot":""}